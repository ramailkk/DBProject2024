{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ram_k\\\\CodeProjects\\\\DatabaseProject-MovieManagement\\\\frontend2\\\\src\\\\components\\\\PagesJS\\\\SelectedMemberContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// Create context to manage selected member state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectedMemberContext = /*#__PURE__*/createContext();\nexport const SelectedMemberProvider = ({\n  children\n}) => {\n  _s();\n  const [selectedMember, setSelectedMember] = useState(null);\n  const location = useLocation();\n\n  // Effect to handle member changes and send them to the backend\n  useEffect(() => {\n    // Function to send selectedMember to the backend when it changes\n    const sendSelectedMemberToBackend = async () => {\n      try {\n        // POST request to send selectedMember data to the backend\n        const response = await fetch('http://localhost:3001/api/updateSelectedMember', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            selectedMember\n          }) // Send the selected member\n        });\n        if (!response.ok) {\n          throw new Error('Failed to send selected member to backend');\n        }\n      } catch (error) {\n        console.error('Error sending selected member:', error);\n      }\n    };\n\n    // Call the function to send data\n    sendSelectedMemberToBackend();\n  }, [selectedMember]); // Trigger when selectedMember changes\n\n  useEffect(() => {\n    const handleNavigation = () => {\n      // Reset context if navigating away from \"/films\"\n      if (location.pathname === '/films') {\n        // Reset context if navigating to films from anywhere\n        setSelectedMember(null);\n      } else if (location.pathname !== '/films' && location.pathname !== '/filmonly' && location.pathname !== '/reviews') {\n        // Reset context when navigating to any other route not related to films\n        setSelectedMember(null);\n      }\n    };\n\n    // Watch for changes in location and reset selectedMember when needed\n    handleNavigation();\n    return () => {\n      // Cleanup if needed\n    };\n  }, [location.pathname]); // Only trigger when the route changes\n\n  return /*#__PURE__*/_jsxDEV(SelectedMemberContext.Provider, {\n    value: {\n      selectedMember,\n      setSelectedMember\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(SelectedMemberProvider, \"WzcBvN0j+Cxv/lcJdtm4vmrqTLk=\", false, function () {\n  return [useLocation];\n});\n_c = SelectedMemberProvider;\nexport const useSelectedMember = () => {\n  _s2();\n  return useContext(SelectedMemberContext);\n};\n_s2(useSelectedMember, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"SelectedMemberProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useLocation","jsxDEV","_jsxDEV","SelectedMemberContext","SelectedMemberProvider","children","_s","selectedMember","setSelectedMember","location","sendSelectedMemberToBackend","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","handleNavigation","pathname","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSelectedMember","_s2","$RefreshReg$"],"sources":["C:/Users/Ram_k/CodeProjects/DatabaseProject-MovieManagement/frontend2/src/components/PagesJS/SelectedMemberContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n// Create context to manage selected member state\r\nconst SelectedMemberContext = createContext();\r\n\r\nexport const SelectedMemberProvider = ({ children }) => {\r\n  const [selectedMember, setSelectedMember] = useState(null);\r\n  const location = useLocation();\r\n\r\n  // Effect to handle member changes and send them to the backend\r\n  useEffect(() => {\r\n    // Function to send selectedMember to the backend when it changes\r\n    const sendSelectedMemberToBackend = async () => {\r\n      try {\r\n        // POST request to send selectedMember data to the backend\r\n        const response = await fetch('http://localhost:3001/api/updateSelectedMember', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ selectedMember }), // Send the selected member\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error('Failed to send selected member to backend');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error sending selected member:', error);\r\n      }\r\n    };\r\n  \r\n    // Call the function to send data\r\n    sendSelectedMemberToBackend();\r\n  }, [selectedMember]); // Trigger when selectedMember changes\r\n\r\n  useEffect(() => {\r\n    const handleNavigation = () => {\r\n      // Reset context if navigating away from \"/films\"\r\n      if (location.pathname === '/films') {\r\n        // Reset context if navigating to films from anywhere\r\n        setSelectedMember(null);\r\n      } else if (\r\n        location.pathname !== '/films' &&\r\n        location.pathname !== '/filmonly' &&\r\n        location.pathname !== '/reviews'\r\n      ) {\r\n        // Reset context when navigating to any other route not related to films\r\n        setSelectedMember(null);\r\n      }\r\n    };\r\n\r\n    // Watch for changes in location and reset selectedMember when needed\r\n    handleNavigation();\r\n\r\n    return () => {\r\n      // Cleanup if needed\r\n    };\r\n  }, [location.pathname]); // Only trigger when the route changes\r\n\r\n  return (\r\n    <SelectedMemberContext.Provider value={{ selectedMember, setSelectedMember }}>\r\n      {children}\r\n    </SelectedMemberContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSelectedMember = () => useContext(SelectedMemberContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,qBAAqB,gBAAGP,aAAa,CAAC,CAAC;AAE7C,OAAO,MAAMQ,sBAAsB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAMW,QAAQ,GAAGT,WAAW,CAAC,CAAC;;EAE9B;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,2BAA2B,GAAG,MAAAA,CAAA,KAAY;MAC9C,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgD,EAAE;UAC7EC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEV;UAAe,CAAC,CAAC,CAAE;QAC5C,CAAC,CAAC;QAEF,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;QAC9D;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;;IAED;IACAV,2BAA2B,CAAC,CAAC;EAC/B,CAAC,EAAE,CAACH,cAAc,CAAC,CAAC,CAAC,CAAC;;EAEtBR,SAAS,CAAC,MAAM;IACd,MAAMuB,gBAAgB,GAAGA,CAAA,KAAM;MAC7B;MACA,IAAIb,QAAQ,CAACc,QAAQ,KAAK,QAAQ,EAAE;QAClC;QACAf,iBAAiB,CAAC,IAAI,CAAC;MACzB,CAAC,MAAM,IACLC,QAAQ,CAACc,QAAQ,KAAK,QAAQ,IAC9Bd,QAAQ,CAACc,QAAQ,KAAK,WAAW,IACjCd,QAAQ,CAACc,QAAQ,KAAK,UAAU,EAChC;QACA;QACAf,iBAAiB,CAAC,IAAI,CAAC;MACzB;IACF,CAAC;;IAED;IACAc,gBAAgB,CAAC,CAAC;IAElB,OAAO,MAAM;MACX;IAAA,CACD;EACH,CAAC,EAAE,CAACb,QAAQ,CAACc,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEzB,oBACErB,OAAA,CAACC,qBAAqB,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAElB,cAAc;MAAEC;IAAkB,CAAE;IAAAH,QAAA,EAC1EA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACqB,CAAC;AAErC,CAAC;AAACvB,EAAA,CA3DWF,sBAAsB;EAAA,QAEhBJ,WAAW;AAAA;AAAA8B,EAAA,GAFjB1B,sBAAsB;AA6DnC,OAAO,MAAM2B,iBAAiB,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMnC,UAAU,CAACM,qBAAqB,CAAC;AAAA;AAAC6B,GAAA,CAA5DD,iBAAiB;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}