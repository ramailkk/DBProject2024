{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ram_k\\\\CodeProjects\\\\DatabaseProject-MovieManagement\\\\frontend2\\\\src\\\\components\\\\PagesJS\\\\SelectedMemberContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\n// Create context to manage selected member state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectedMemberContext = /*#__PURE__*/createContext();\nexport const SelectedMemberProvider = ({\n  children\n}) => {\n  _s();\n  const [selectedMember, setSelectedMember] = useState(null);\n  const [movies, setMovies] = useState([]); // State to hold the list of movies\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Effect to handle member changes and send them to backend\n  useEffect(() => {\n    const sendSelectedMemberToBackend = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/api/updateSelectedMember', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            selectedMember\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to send selected member to backend');\n        }\n      } catch (error) {\n        console.error('Error sending selected member:', error);\n      }\n    };\n    sendSelectedMemberToBackend();\n  }, [selectedMember]); // Trigger when selectedMember changes\n\n  // Function to fetch all movies from the backend\n  const fetchAllMovies = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/movies');\n      const data = await response.json();\n      if (response.ok) {\n        setMovies(data.data); // Update the movies state with the fetched movies\n      } else {\n        throw new Error('Failed to fetch movies');\n      }\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n    }\n  };\n  useEffect(() => {\n    const handleNavigation = e => {\n      var _e$target$getAttribut, _e$target;\n      const targetPath = (_e$target$getAttribut = (_e$target = e.target).getAttribute) === null || _e$target$getAttribut === void 0 ? void 0 : _e$target$getAttribut.call(_e$target, 'href'); // Safely retrieve 'href'\n\n      if (targetPath) {\n        // If on /films and clicking on the same /films link, refill movies\n        if (location.pathname === '/films' && targetPath === '/films') {\n          setSelectedMember(null); // Reset selected member\n          fetchAllMovies(); // Refills the movie list\n        }\n\n        // Check for a member's film link and set selectedMember accordingly\n        if (targetPath.startsWith('/filmonly')) {\n          const memberId = targetPath.split('/').pop(); // Extract member ID\n          setSelectedMember(memberId); // Set the selected member\n          navigate(targetPath); // Navigate to the member's film page\n        }\n\n        // Reset context when navigating to other routes\n        if (!targetPath.startsWith('/films') && !targetPath.startsWith('/filmonly') && !targetPath.startsWith('/reviews')) {\n          setSelectedMember(null);\n        }\n      }\n    };\n    document.body.addEventListener('click', handleNavigation);\n    return () => {\n      document.body.removeEventListener('click', handleNavigation);\n    };\n  }, [location, navigate]); // Add navigate and location as dependencies\n\n  return /*#__PURE__*/_jsxDEV(SelectedMemberContext.Provider, {\n    value: {\n      selectedMember,\n      setSelectedMember,\n      movies\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(SelectedMemberProvider, \"aTafD0rLHZnqgZYNquXJw88t7Ek=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = SelectedMemberProvider;\nexport const useSelectedMember = () => {\n  _s2();\n  return useContext(SelectedMemberContext);\n};\n_s2(useSelectedMember, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"SelectedMemberProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useLocation","useNavigate","jsxDEV","_jsxDEV","SelectedMemberContext","SelectedMemberProvider","children","_s","selectedMember","setSelectedMember","movies","setMovies","location","navigate","sendSelectedMemberToBackend","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","fetchAllMovies","data","json","handleNavigation","e","_e$target$getAttribut","_e$target","targetPath","target","getAttribute","call","pathname","startsWith","memberId","split","pop","document","addEventListener","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSelectedMember","_s2","$RefreshReg$"],"sources":["C:/Users/Ram_k/CodeProjects/DatabaseProject-MovieManagement/frontend2/src/components/PagesJS/SelectedMemberContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\n// Create context to manage selected member state\r\nconst SelectedMemberContext = createContext();\r\n\r\nexport const SelectedMemberProvider = ({ children }) => {\r\n  const [selectedMember, setSelectedMember] = useState(null);\r\n  const [movies, setMovies] = useState([]); // State to hold the list of movies\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  // Effect to handle member changes and send them to backend\r\n  useEffect(() => {\r\n    const sendSelectedMemberToBackend = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3001/api/updateSelectedMember', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ selectedMember }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to send selected member to backend');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error sending selected member:', error);\r\n      }\r\n    };\r\n\r\n    sendSelectedMemberToBackend();\r\n  }, [selectedMember]); // Trigger when selectedMember changes\r\n\r\n  // Function to fetch all movies from the backend\r\n  const fetchAllMovies = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/movies');\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setMovies(data.data); // Update the movies state with the fetched movies\r\n      } else {\r\n        throw new Error('Failed to fetch movies');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching movies:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleNavigation = (e) => {\r\n      const targetPath = e.target.getAttribute?.('href'); // Safely retrieve 'href'\r\n\r\n      if (targetPath) {\r\n        // If on /films and clicking on the same /films link, refill movies\r\n        if (location.pathname === '/films' && targetPath === '/films') {\r\n          setSelectedMember(null); // Reset selected member\r\n          fetchAllMovies(); // Refills the movie list\r\n        }\r\n\r\n        // Check for a member's film link and set selectedMember accordingly\r\n        if (targetPath.startsWith('/filmonly')) {\r\n          const memberId = targetPath.split('/').pop(); // Extract member ID\r\n          setSelectedMember(memberId); // Set the selected member\r\n          navigate(targetPath); // Navigate to the member's film page\r\n        }\r\n        \r\n        // Reset context when navigating to other routes\r\n        if (\r\n          !targetPath.startsWith('/films') &&\r\n          !targetPath.startsWith('/filmonly') &&\r\n          !targetPath.startsWith('/reviews')\r\n        ) {\r\n          setSelectedMember(null);\r\n        }\r\n      }\r\n    };\r\n\r\n    document.body.addEventListener('click', handleNavigation);\r\n\r\n    return () => {\r\n      document.body.removeEventListener('click', handleNavigation);\r\n    };\r\n  }, [location, navigate]); // Add navigate and location as dependencies\r\n\r\n  return (\r\n    <SelectedMemberContext.Provider value={{ selectedMember, setSelectedMember, movies }}>\r\n      {children}\r\n    </SelectedMemberContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSelectedMember = () => useContext(SelectedMemberContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}